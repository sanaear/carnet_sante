<?php

namespace App\Controller;

use App\Entity\Patient;
use App\Entity\Ordonnance;
use App\Entity\Consultation;
use App\Form\ChangePasswordType;
use App\Form\PatientProfileType;
use App\Repository\ConsultationRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use App\Service\OrdonnancePdfGenerator;
use Vich\UploaderBundle\Templating\Helper\UploaderHelper;

#[IsGranted('ROLE_PATIENT')]
#[Route('/patient')]
class PatientController extends AbstractController
{
    #[Route('/dashboard', name: 'app_patient_dashboard')]
    public function dashboard(EntityManagerInterface $em): Response
    {
        /** @var Patient $patient */
        $patient = $this->getUser();
        
        // Get all consultations for the patient with ordonnances
        $consultationsWithOrdonnances = $em->getRepository(Consultation::class)
            ->createQueryBuilder('c')
            ->leftJoin('c.ordonnance', 'o')
            ->where('c.patient = :patient')
            ->andWhere('o.id IS NOT NULL')
            ->setParameter('patient', $patient)
            ->orderBy('c.date', 'DESC')
            ->getQuery()
            ->getResult();

        return $this->render('patient/dashboard.html.twig', [
            'patient' => $patient,
            'consultationsWithOrdonnances' => $consultationsWithOrdonnances,
        ]);
    }

    #[Route('/ordonnances', name: 'app_patient_ordonnances')]
    public function ordonnances(EntityManagerInterface $em): Response
    {
        /** @var Patient $patient */
        $patient = $this->getUser();
        
        // Get all consultations with ordonnances
        $consultations = $em->getRepository(Consultation::class)
            ->createQueryBuilder('c')
            ->leftJoin('c.ordonnance', 'o')
            ->where('c.patient = :patient')
            ->andWhere('o.id IS NOT NULL')
            ->setParameter('patient', $patient)
            ->orderBy('c.date', 'DESC')
            ->getQuery()
            ->getResult();
            
        return $this->render('patient/ordonnances.html.twig', [
            'consultations' => $consultations,
            'patient' => $patient,
        ]);
    }
    
    #[Route('/ordonnance/{id}/download', name: 'app_patient_ordonnance_download')]
    public function downloadOrdonnance(
        Ordonnance $ordonnance,
        OrdonnancePdfGenerator $pdfGenerator,
        UploaderHelper $uploaderHelper
    ): Response {
        /** @var Patient $patient */
        $patient = $this->getUser();
        
        // Check if the ordonnance exists and belongs to the patient
        if (!$ordonnance || $ordonnance->getConsultation()->getPatient() !== $patient) {
            throw $this->createAccessDeniedException('Vous n\'êtes pas autorisé à accéder à cette ordonnance.');
        }
        
        try {
            // Handle generated ordonnances (PDFs generated by the system)
            if ($ordonnance->isGenerated()) {
                return $pdfGenerator->generatePdf($ordonnance);
            }
            
            // Handle uploaded ordonnances (PDFs uploaded by the doctor)
            $filePath = $this->getParameter('kernel.project_dir') . '/public' . $uploaderHelper->asset($ordonnance, 'file');
            
            if (!file_exists($filePath)) {
                throw $this->createNotFoundException('Le fichier de l\'ordonnance est introuvable.');
            }
            
            // Generate a safe filename
            $filename = sprintf('ordonnance-%s-%d.pdf',
                $patient->getUserIdentifier(),
                $ordonnance->getId()
            );
            
            $response = new BinaryFileResponse($filePath);
            $response->setContentDisposition(
                ResponseHeaderBag::DISPOSITION_ATTACHMENT,
                $filename
            );
            
            // Set appropriate content type
            $response->headers->set('Content-Type', 'application/pdf');
            
            return $response;
            
        } catch (\Exception $e) {
            $this->addFlash('error', 'Une erreur est survenue lors du téléchargement de l\'ordonnance.');
            return $this->redirectToRoute('app_patient_ordonnances');
        }
    }
    
    #[Route('/history', name: 'app_patient_history')]
    public function history(Request $request, ConsultationRepository $consultationRepository): Response
    {
        /** @var Patient $patient */
        $patient = $this->getUser();

        $year = $request->query->get('year', 'all');
        $type = $request->query->get('type', 'all');
        $doctor = $request->query->get('doctor', 'all');

        $consultations = $consultationRepository->findByFilters($patient, $year, $type, $doctor);

        return $this->render('patient/history.html.twig', [
            'patient' => $patient,
            'consultations' => $consultations,
            'currentYear' => (new \DateTime())->format('Y'),
            'selectedYear' => $year,
            'selectedType' => $type,
            'selectedDoctor' => $doctor,
        ]);
    }

    #[Route('/profile', name: 'app_patient_profile')]
    public function profile(Request $request, EntityManagerInterface $entityManager, UserPasswordHasherInterface $passwordHasher): Response
    {
        /** @var Patient $patient */
        $patient = $this->getUser();
        
        // Profile form
        $profileForm = $this->createForm(PatientProfileType::class, $patient);
        $profileForm->handleRequest($request);

        if ($profileForm->isSubmitted() && $profileForm->isValid()) {
            $entityManager->flush();
            $this->addFlash('success', 'Votre profil a été mis à jour avec succès.');
            return $this->redirectToRoute('app_patient_profile');
        }

        // Password form
        $passwordForm = $this->createForm(ChangePasswordType::class);
        $passwordForm->handleRequest($request);

        if ($passwordForm->isSubmitted() && $passwordForm->isValid()) {
            $data = $passwordForm->getData();
            
            // Verify current password
            if (!$passwordHasher->isPasswordValid($patient, $data['currentPassword'])) {
                $this->addFlash('password_error', 'Le mot de passe actuel est incorrect.');
                return $this->redirectToRoute('app_patient_profile');
            }

            try {
                // Set and hash the new password
                $plainPassword = $data['newPassword'];
                $patient->setPlainPassword($plainPassword);
                $hashedPassword = $passwordHasher->hashPassword($patient, $plainPassword);
                $patient->setPassword($hashedPassword);
                $patient->eraseCredentials();
                
                // Update the timestamp
                $patient->setUpdatedAt(new \DateTimeImmutable());
                
                // Save changes
                $entityManager->persist($patient);
                $entityManager->flush();
                
                // Verify the password was updated
                $entityManager->clear();
                $updatedUser = $entityManager->getRepository(Patient::class)->find($patient->getId());
                
                if ($passwordHasher->isPasswordValid($updatedUser, $plainPassword)) {
                    $this->addFlash('password_success', 'Votre mot de passe a été modifié avec succès.');
                } else {
                    throw new \RuntimeException('La vérification du mot de passe a échoué après la mise à jour.');
                }
            } catch (\Exception $e) {
                $this->addFlash('password_error', 'Une erreur est survenue lors de la mise à jour du mot de passe.');
            }
            
            return $this->redirectToRoute('app_patient_profile');
        }

        return $this->render('patient/profile.html.twig', [
            'patient' => $patient,
            'profileForm' => $profileForm->createView(),
            'passwordForm' => $passwordForm->createView(),
        ]);
    }
}